//If you want to know how this algorithm works: http://www.ryanjuckett.com/programming/cyclic-coordinate-descent-in-2d/
//Press 1, 2, 3, 4, 5, 6 or 7 to see different IK skeletal structures
int mode = 1;
int sizeX = 640;
int sizeY = 480;
int startX = sizeX/2;
int startY = sizeY/2;
color BLACK = color(0, 0, 0);
color DK_GRAY = color(100, 100, 100);
color RED = color(200, 80, 80);
color BLUE = color(80, 80, 200);

ArrayList<Bone> boneList = new ArrayList<Bone>();
ArrayList<Bone> boneList2 = new ArrayList<Bone>();
ArrayList<Bone> boneList3 = new ArrayList<Bone>();
ArrayList<Bone> boneList4 = new ArrayList<Bone>();
ArrayList<Bone> boneListCat = new ArrayList<Bone>();
ArrayList<Bone> boneListCat2 = new ArrayList<Bone>();
ArrayList<Bone> boneListCat3 = new ArrayList<Bone>();
ArrayList<Bone> boneListLongCat = new ArrayList<Bone>();

PImage angryCat1;
PImage angryCat2;
PImage catPart1;
PImage catPart2;
PImage catPart3;

PImage longCatHead;
PImage longCatPart;
PImage longCatEnd;
  
void setup() {
  size(sizeX,sizeY); 
  angryCat1 = loadImage("angrycat.png");
  angryCat2 = loadImage("angrycat2.png");
  catPart1 = loadImage("catpart1.png");
  catPart2 = loadImage("catpart2.png");
  catPart3 = loadImage("catpart3.png");
  
  longCatHead = loadImage("longCatHead.png");
  longCatPart = loadImage("longCatPart.png");
  longCatEnd = loadImage("longCatEnd.png");
  //boneList
  Bone firstBone = new Bone(null, 100, 30, new PVector(startX, startY));
  Bone secondBone = new Bone(firstBone, 80, 30, null);
  Bone thirdBone = new Bone(secondBone, 60, 30, null);
  Bone fourthBone = new Bone(thirdBone, 40, 30, null);
   
  boneList.add(firstBone);
  boneList.add(secondBone);
  boneList.add(thirdBone);
  boneList.add(fourthBone);
  
  //boneList2
  Bone firstBone2 = new Bone(null, 50, 60, new PVector(startX, startY));
  Bone secondBone2 = new Bone(firstBone2, 70, -20, null);
  Bone thirdBone2 = new Bone(secondBone2, 30, 40, null);
  Bone fourthBone2 = new Bone(thirdBone2, 100, -70, null);
   
  boneList2.add(firstBone2);
  boneList2.add(secondBone2);
  boneList2.add(thirdBone2);
  boneList2.add(fourthBone2);
    
  //boneList3
  Bone firstBone3 = new Bone(null, 40, 60, new PVector(80, 80));
  Bone secondBone3 = new Bone(firstBone3, 40, 60, null);
  Bone thirdBone3 = new Bone(secondBone3, 40, 60, null);
  Bone fourthBone3 = new Bone(thirdBone3, 40, 60, null);
  Bone fifthBone3 = new Bone(fourthBone3, 40, 60, null);
  Bone sixthBone3 = new Bone(fifthBone3, 40, 60, null);
  Bone seventhBone3 = new Bone(sixthBone3, 40, 60, null);
   
  boneList3.add(firstBone3);
  boneList3.add(secondBone3);
  boneList3.add(thirdBone3);
  boneList3.add(fourthBone3);
  boneList3.add(fifthBone3);
  boneList3.add(sixthBone3);
  boneList3.add(seventhBone3);
  
  //boneList4
  Bone firstBone4 = new Bone(null, 60, 10, new PVector(sizeX - 80, sizeY - 80));
  Bone secondBone4 = new Bone(firstBone4, 60, 10, null);
  Bone thirdBone4 = new Bone(secondBone4, 300, 10, null);
   
  boneList4.add(firstBone4);
  boneList4.add(secondBone4);
  boneList4.add(thirdBone4);
  
  int catOffsetX = -100;
  int catOffsetY = 400;
  //boneListCat
  Bone firstBoneCat = new Bone(null, 200, 0, new PVector(catOffsetX, catOffsetY));
  Bone secondBoneCat = new Bone(firstBoneCat, 150, 0, null);
  Bone thirdBoneCat = new Bone(secondBoneCat, 30, 0, null);
   
  boneListCat.add(firstBoneCat);
  boneListCat.add(secondBoneCat);
  boneListCat.add(thirdBoneCat);
 
  int catOffsetX2 = -100;
  int catOffsetY2 = 100;
  //boneListCat2
  Bone firstBoneCat2 = new Bone(null, 200, 0, new PVector(catOffsetX2, catOffsetY2));
  Bone secondBoneCat2 = new Bone(firstBoneCat2, 150, 0, null);
  Bone thirdBoneCat2 = new Bone(secondBoneCat2, 30, 0, null);
   
  boneListCat2.add(firstBoneCat2);
  boneListCat2.add(secondBoneCat2);
  boneListCat2.add(thirdBoneCat2);
  
  int catOffsetX3 = 750;
  int catOffsetY3 = 300;
  //boneListCat3
  Bone firstBoneCat3 = new Bone(null, 200, 180, new PVector(catOffsetX3, catOffsetY3));
  Bone secondBoneCat3 = new Bone(firstBoneCat3, 150, 180, null);
  Bone thirdBoneCat3 = new Bone(secondBoneCat3, 30, 180, null);
   
  boneListCat3.add(firstBoneCat3);
  boneListCat3.add(secondBoneCat3);
  boneListCat3.add(thirdBoneCat3);
  
  int longCatOffsetX = -50;
  int longCatOffsetY = 200;
  //longcat
  Bone firstBoneLongCat = new Bone(null, 110, 0, new PVector(longCatOffsetX, longCatOffsetY));
  Bone secondBoneLongCat= new Bone(firstBoneLongCat, 100, 0, null);
  Bone thirdBoneLongCat= new Bone(secondBoneLongCat, 100, 0, null);
  Bone fourthBoneLongCat= new Bone(thirdBoneLongCat, 100, 0, null);
  Bone fifthBoneLongCat= new Bone(fourthBoneLongCat, 100, 0, null);
  Bone sixthBoneLongCat = new Bone(fifthBoneLongCat, 100, 0, null);
   
  boneListLongCat.add(firstBoneLongCat);
  boneListLongCat.add(secondBoneLongCat);
  boneListLongCat.add(thirdBoneLongCat);
  boneListLongCat.add(fourthBoneLongCat);
  boneListLongCat.add(fifthBoneLongCat);
  boneListLongCat.add(sixthBoneLongCat);

}

void draw() {
  background(255);
  strokeWeight(2);

  //perform the CDC algorithm
  CDC(boneList);
  CDC(boneList2);
  CDC(boneList3);
  CDC(boneList4);
  CDC(boneListCat);
  CDC(boneListCat2);
  CDC(boneListCat3);
  CDC(boneListLongCat);
  
  if (mode == 1 || mode == 5) {
    stroke(BLACK);
    for(Bone bone: boneList) {
      bone.drawMe(); 
    }
  }
  if (mode == 2 || mode == 5) {
    stroke(DK_GRAY);
    for(Bone bone: boneList2) {
      bone.drawMe(); 
    }
  }
  if (mode == 3 || mode == 5) {
    stroke(RED);
    for(Bone bone: boneList3) {
      bone.drawMe(); 
    }
  }
  if (mode == 4 || mode == 5) {
    stroke(BLUE);
    for(Bone bone: boneList4) {
      bone.drawMe(); 
    }
  }
  if (mode == 6) {
    float randomModX = random(-10, 10);
    float randomModY = random(-10, 10);
    
    image(angryCat1, 450 + randomModX, 0 + randomModY);
    image(angryCat2, 0 + randomModX, 0 + randomModY);
     
    drawCat(boneListCat);
    drawCat(boneListCat2);
    drawCat(boneListCat3);
  }
  if (mode == 7) {
    drawLongCat(boneListLongCat);
  }
  
}

void CDC(ArrayList<Bone> list) {
  //calculate the IK using Cyclic Coordinate Descent
  PVector target = new PVector(mouseX, mouseY);
  Bone endBone = list.get(list.size() - 1);
  endBone.alignToTarget(target, endBone); //this will recursively rotate the bones one iteration closer to the target
}

void drawCat(ArrayList<Bone> list) {
  Bone part1 = list.get(0);
  Bone part2 = list.get(1);
  Bone part3 = list.get(2);
  
  //part 1
  translate(part1.getStartPos().x, part1.getStartPos().y);
  rotate(part1.getRot());
  image(catPart1, 0, -50);
  rotate(-part1.getRot());
  translate(-part1.getStartPos().x, -part1.getStartPos().y);
  //part 2
  translate(part2.getStartPos().x, part2.getStartPos().y);
  rotate(part2.getRot());
  image(catPart2, 0, -50);
  rotate(-part2.getRot());
  translate(-part2.getStartPos().x, -part2.getStartPos().y);
  //part 3
  translate(part3.getStartPos().x, part3.getStartPos().y);
  rotate(part3.getRot());
  image(catPart3, 0, -50);
  rotate(-part3.getRot());
  translate(-part3.getStartPos().x, -part3.getStartPos().y);
}

void drawLongCat(ArrayList<Bone> list) {
    Bone partStart = list.get(0);
    Bone partEnd = list.get(list.size() - 1);
    
    //part 1
    translate(partStart.getStartPos().x, partStart.getStartPos().y);
    rotate(partStart.getRot());
    image(longCatEnd, 0, -50);
    rotate(-partStart.getRot());
    translate(-partStart.getStartPos().x, -partStart.getStartPos().y);
    
    //part 2
    for (int index = 1; index < list.size() - 1; index++) {
      Bone bonePiece = list.get(index);
      translate(bonePiece.getStartPos().x, bonePiece.getStartPos().y);
      rotate(bonePiece.getRot());
      image(longCatPart, 0, -50);
      rotate(-bonePiece.getRot());
      translate(-bonePiece.getStartPos().x, -bonePiece.getStartPos().y);
    } 

    
    //part 3
    translate(partEnd.getStartPos().x, partEnd.getStartPos().y);
    rotate(partEnd.getRot());
    image(longCatHead, 0, -50);
    rotate(-partEnd.getRot());
    translate(-partEnd.getStartPos().x, -partEnd.getStartPos().y);
}


class Bone {
   Bone prev; //the parent bone
   int boneLength; //how long the bone is
   float relativeRot; //the rotation in degrees
   PVector relativePos; //offset (use only for the first bone)
   
   Bone (Bone prev, int boneLength, float relativeRot, PVector relativePos) {
     this.prev = prev;
     this.boneLength = boneLength;
     this.relativeRot = radians(relativeRot);
     this.relativePos = relativePos;
   } 
   
   void drawMe () {
     line (getStartPos().x, getStartPos().y, getEndPos().x, getEndPos().y);
   }
   
   //recursive method. call from the last bone
   void alignToTarget(PVector target, Bone endBone) {
       PVector currentBoneVector = new PVector(endBone.getEndPos().x - getStartPos().x, endBone.getEndPos().y - getStartPos().y);
       PVector targetVector = new PVector(target.x - getStartPos().x, target.y - getStartPos().y);
       float angleDiff = PVector.angleBetween(currentBoneVector, targetVector);
       targetVector.sub(currentBoneVector);
  
       //find out which side the target was on in relation to the currentBoneVector
       float position = (0 - currentBoneVector.x) * (targetVector.y - currentBoneVector.y) - (0 - currentBoneVector.y) * (targetVector.x - currentBoneVector.x);

       if (position > 0) { //the target is on the right side of currentBoneVector. reverse the sign
          angleDiff *= -1; 
       }
       relativeRot += angleDiff;
       
       //call the parent bone's method
       if (prev != null) {
         prev.alignToTarget(target, endBone);
       }
       
   }
   
   int getLength () {
     return boneLength; 
   }
   
   float getRot () {
     if (prev == null) {
       return relativeRot; 
     }
     else {
       return prev.getRot() + relativeRot;
     }
   }
   
   PVector getStartPos () {
     if (prev == null) {
       return new PVector(relativePos.x, relativePos.y);
     }
     else {
       return new PVector(prev.getEndPos().x, prev.getEndPos().y);
     }
   }
   
   PVector getEndPos () {
     float endX = getStartPos().x + boneLength * cos(getRot());
     float endY = getStartPos().y + boneLength * sin(getRot());
     return new PVector(endX, endY);
   }
   
}

void keyPressed() {
  if (key == '1'){
    mode = 1;
  }
  else if (key == '2'){
    mode = 2;
  }
  else if (key == '3'){
    mode = 3;
  }
  else if (key == '4'){
    mode = 4;
  }
  else if (key == '5'){
    mode = 5;
  }
  else if (key == '6'){
    mode = 6;
  }
  else if (key == '7'){
    mode = 7;
  }
  
}